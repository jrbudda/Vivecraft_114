--- a/net/minecraft/client/renderer/model/ModelBakery.java
+++ b/net/minecraft/client/renderer/model/ModelBakery.java
@@ -27,6 +27,7 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.Map.Entry;
+import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -393,7 +394,7 @@
 
                                 if (Reflector.ForgeModelBlockDefinition_fromJson5.exists())
                                 {
-                                    BlockModelDefinition blockmodeldefinition1 = (BlockModelDefinition)Reflector.call(Reflector.ForgeModelBlockDefinition_fromJson5, this.containerHolder, new InputStreamReader(inputstream, StandardCharsets.UTF_8), blockstateLocation, this, this::putModel);
+                                    BlockModelDefinition blockmodeldefinition1 = (BlockModelDefinition)Reflector.call(Reflector.ForgeModelBlockDefinition_fromJson5, new Object[] {this.containerHolder, new InputStreamReader(inputstream, StandardCharsets.UTF_8), blockstateLocation, this, (BiConsumer<ResourceLocation, IUnbakedModel>) this::putModel });
                                     pair2 = Pair.of(p_lambda$loadBlockstate$13_2_.getPackName(), blockmodeldefinition1);
                                 }
                                 else
@@ -488,9 +489,9 @@
 
                                 try {
                                     ModelBakery.ModelListWrapper modelbakery$modellistwrapper1 = pair2.getSecond().get();
-                                    hashmap1.computeIfAbsent(modelbakery$modellistwrapper1, (p_lambda$null$20_0_) -> {
+                                    ((Set)map3.computeIfAbsent(modelbakery$modellistwrapper1, (p_lambda$null$20_0_) -> {
                                         return Sets.newIdentityHashSet();
-                                    }).add(p_lambda$loadBlockstate$21_6_);
+                                    })).add(p_lambda$loadBlockstate$21_6_);
                                 }
                                 catch (Exception exception11)
                                 {
@@ -499,7 +500,7 @@
                             });
                             map3.forEach((p_lambda$loadBlockstate$22_1_, p_lambda$loadBlockstate$22_2_) ->
                             {
-                                Iterator<BlockState> iterator = p_lambda$loadBlockstate$22_2_.iterator();
+                                Iterator<BlockState> iterator = ((Set)p_lambda$loadBlockstate$22_2_).iterator();
 
                                 while (iterator.hasNext())
                                 {
@@ -512,9 +513,9 @@
                                     }
                                 }
 
-                                if (p_lambda$loadBlockstate$22_2_.size() > 1)
+                                if (((Set)p_lambda$loadBlockstate$22_2_).size() > 1)
                                 {
-                                    this.func_225352_a(p_lambda$loadBlockstate$22_2_);
+                                    this.func_225352_a((Iterable<BlockState>) p_lambda$loadBlockstate$22_2_);
                                 }
                             });
                         }
@@ -581,7 +582,7 @@
 
                     try {
                         ModelBakery.ModelListWrapper modelbakery$modellistwrapper1 = pair2.getSecond().get();
-                        hashmap1.computeIfAbsent(modelbakery$modellistwrapper1, (p_lambda$null$20_0_) -> {
+                        hashmap2.computeIfAbsent(modelbakery$modellistwrapper1, (p_lambda$null$20_0_) -> {
                             return Sets.newIdentityHashSet();
                         }).add(p_lambda$loadBlockstate$21_6_);
                     }
