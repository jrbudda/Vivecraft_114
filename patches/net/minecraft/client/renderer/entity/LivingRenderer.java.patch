--- a/net/minecraft/client/renderer/entity/LivingRenderer.java
+++ b/net/minecraft/client/renderer/entity/LivingRenderer.java
@@ -5,12 +5,15 @@
 import com.mojang.blaze3d.platform.GlStateManager;
 import java.nio.FloatBuffer;
 import java.util.List;
+import java.util.UUID;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.player.ClientPlayerEntity;
 import net.minecraft.client.renderer.GLAllocation;
 import net.minecraft.client.renderer.entity.layers.LayerRenderer;
 import net.minecraft.client.renderer.entity.model.EntityModel;
 import net.minecraft.client.renderer.entity.model.SpiderModel;
+import net.minecraft.client.renderer.entity.model.VRPlayerModel;
 import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.entity.Pose;
@@ -20,6 +23,7 @@
 import net.minecraft.util.Direction;
 import net.minecraft.util.Util;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.text.TextFormatting;
 import net.optifine.Config;
 import net.optifine.EmissiveTextures;
@@ -28,6 +32,7 @@
 import net.optifine.shaders.Shaders;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.render.PlayerModelController;
 
 public abstract class LivingRenderer<T extends LivingEntity, M extends EntityModel<T>> extends EntityRenderer<T> implements IEntityRenderer<T, M>
 {
@@ -137,6 +142,24 @@
                 float f7 = MathHelper.lerp(partialTicks, entity.prevRotationPitch, entity.rotationPitch);
                 this.renderLivingAt(entity, x, y, z);
                 float f8 = this.handleRotationFloat(entity, partialTicks);
+
+                //VIVECRAFT
+                if(this.getEntityModel() instanceof VRPlayerModel && entity instanceof PlayerEntity){
+                	UUID uuid = entity.getUniqueID();
+                	VRPlayerModel mp = (VRPlayerModel) getEntityModel();
+                	double d3 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
+                	double d4 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
+                	double d5 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
+                	mp.renderPos = new Vec3d(d3, d4, d5);
+                	if(PlayerModelController.getInstance().isTracked(uuid)){
+                		PlayerModelController.RotInfo rotInfo=PlayerModelController.getInstance().getRotationsForPlayer(uuid);	
+                		f = (float) Math.toDegrees(rotInfo.getBodyYawRadians());
+                	}
+                }
+
+                float wasyaw = entity.rotationYaw;
+                //
+
                 this.applyRotations(entity, f8, f, partialTicks);
                 float f4 = this.prepareScale(entity, partialTicks);
                 float f5 = 0.0F;
