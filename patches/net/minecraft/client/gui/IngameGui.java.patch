--- a/net/minecraft/client/gui/IngameGui.java
+++ b/net/minecraft/client/gui/IngameGui.java
@@ -6,12 +6,19 @@
 import com.google.common.collect.Ordering;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.GlStateManager.DestFactor;
+import com.mojang.blaze3d.platform.GlStateManager.SourceFactor;
+
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.stream.Collectors;
+
+import org.lwjgl.opengl.GL11;
+import org.vivecraft.render.RenderPass;
+
 import net.minecraft.block.Blocks;
 import net.minecraft.client.GameSettings;
 import net.minecraft.client.Minecraft;
@@ -23,6 +30,7 @@
 import net.minecraft.client.gui.overlay.DebugOverlayGui;
 import net.minecraft.client.gui.overlay.PlayerTabOverlayGui;
 import net.minecraft.client.gui.overlay.SubtitleOverlayGui;
+import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.gui.screen.inventory.ContainerScreen;
 import net.minecraft.client.renderer.ActiveRenderInfo;
 import net.minecraft.client.renderer.BufferBuilder;
@@ -107,6 +115,8 @@
     private int scaledWidth;
     private int scaledHeight;
     private final Map<ChatType, List<IChatListener>> chatListeners = Maps.newHashMap();
+    // Vivecraft
+    public boolean showPlayerList;
 
     public IngameGui(Minecraft p_i204_1_)
     {
@@ -150,24 +160,31 @@
         FontRenderer fontrenderer = this.getFontRenderer();
         GlStateManager.enableBlend();
 
-        if (Config.isVignetteEnabled())
+		// VIVECRAFT: lol no
+		/*if (Config.isVignetteEnabled())
         {
             this.renderVignette(this.mc.getRenderViewEntity());
         }
         else
-        {
+		{*/
             GlStateManager.enableDepthTest();
-            GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-        }
+			// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+			GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+		//}
 
         ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
 
-        if (this.mc.gameSettings.thirdPersonView == 0 && itemstack.getItem() == Blocks.CARVED_PUMPKIN.asItem())
+		//VIVECRAFT - srsly.
+		mc.pumpkineffect = 0;
+        if (this.mc.currentPass != RenderPass.THIRD && itemstack.getItem() == Blocks.CARVED_PUMPKIN.asItem())
         {
-            this.renderPumpkinOverlay();
+			mc.pumpkineffect = 1f;
+			//this.renderPumpkinOverlay();
         }
+		//
 
-        if (!this.mc.player.isPotionActive(Effects.NAUSEA))
+		/* VIVECRAFT - no no no.
+        if (!this.mc.player.isPotionActive(MobEffects.NAUSEA))
         {
             float f = MathHelper.lerp(partialTicks, this.mc.player.prevTimeInPortal, this.mc.player.timeInPortal);
 
@@ -176,6 +193,7 @@
                 this.renderPortal(f);
             }
         }
+		 */
 
         if (this.mc.playerController.getCurrentGameType() == GameType.SPECTATOR)
         {
@@ -192,10 +210,13 @@
             this.mc.getTextureManager().bindTexture(GUI_ICONS_LOCATION);
             GlStateManager.enableBlend();
             GlStateManager.enableAlphaTest();
-            this.renderAttackIndicator();
+			//VIVECRAFT NOPE!
+			//this.renderAttackIndicator(partialTicks);
+			//
             GlStateManager.enableAlphaTest();
-            GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-            this.mc.getProfiler().startSection("bossHealth");
+			// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+			GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+			this.mc.getProfiler().startSection("bossHealth");
             this.overlayBoss.render();
             this.mc.getProfiler().endSection();
             GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -280,8 +301,9 @@
                     GlStateManager.pushMatrix();
                     GlStateManager.translatef((float)(this.scaledWidth / 2), (float)(this.scaledHeight - 68), 0.0F);
                     GlStateManager.enableBlend();
-                    GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-                    int k1 = 16777215;
+					// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+					GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+					int k1 = 16777215;
 
                     if (this.animateOverlayMessageColor)
                     {
@@ -322,7 +344,8 @@
                     GlStateManager.pushMatrix();
                     GlStateManager.translatef((float)(this.scaledWidth / 2), (float)(this.scaledHeight / 2), 0.0F);
                     GlStateManager.enableBlend();
-                    GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+					// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+					GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
                     GlStateManager.pushMatrix();
                     GlStateManager.scalef(4.0F, 4.0F, 4.0F);
                     int l1 = j1 << 24 & -16777216;
@@ -370,8 +393,28 @@
                 this.renderScoreboard(scoreobjective1);
             }
 
-            GlStateManager.enableBlend();
-            GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+			if (mc.currentScreen != null) {
+				// VIVECRAFT: Dimming effect when in background
+				float brightness = 0.5F;
+				GlStateManager.enableBlend();
+				GlStateManager.blendFuncSeparate(SourceFactor.ZERO, DestFactor.ONE, SourceFactor.ZERO, DestFactor.SRC_ALPHA);
+				GlStateManager.disableTexture();
+				GlStateManager.depthMask(false);
+				Tessellator tessellator = Tessellator.getInstance();
+				BufferBuilder bufferbuilder = tessellator.getBuffer();
+				bufferbuilder.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_COLOR);
+				bufferbuilder.pos(0.0D, mc.currentScreen.height, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				bufferbuilder.pos(mc.currentScreen.width, mc.currentScreen.height, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				bufferbuilder.pos(mc.currentScreen.width, 0.0D, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				bufferbuilder.pos(0.0D, 0.0D, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+				tessellator.draw();
+				GlStateManager.depthMask(true);
+				GlStateManager.enableTexture();
+			}
+
+			GlStateManager.enableBlend();
+			// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+			GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
             GlStateManager.disableAlphaTest();
             GlStateManager.pushMatrix();
             GlStateManager.translatef(0.0F, (float)(this.scaledHeight - 48), 0.0F);
@@ -381,7 +424,7 @@
             GlStateManager.popMatrix();
             scoreobjective1 = scoreboard.getObjectiveInDisplaySlot(0);
 
-            if (this.mc.gameSettings.keyBindPlayerList.isKeyDown() && (!this.mc.isIntegratedServerRunning() || this.mc.player.connection.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
+            if ((this.mc.gameSettings.keyBindPlayerList.isKeyDown() || showPlayerList) && (!this.mc.isIntegratedServerRunning() || this.mc.player.connection.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
             {
                 this.overlayPlayerList.setVisible(true);
                 this.overlayPlayerList.render(this.scaledWidth, scoreboard, scoreobjective1);
@@ -408,6 +451,7 @@
         }
     }
 
+    //unused
     private void renderAttackIndicator()
     {
         GameSettings gamesettings = this.mc.gameSettings;
@@ -427,8 +471,8 @@
             }
             else
             {
-                GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-                int i = 15;
+				GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ONE_MINUS_SRC_COLOR, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+				int i = 15;
                 this.blit((this.scaledWidth - 15) / 2, (this.scaledHeight - 15) / 2, 0, 0, 15, 15);
 
                 if (this.mc.gameSettings.attackIndicator == AttackIndicatorStatus.CROSSHAIR)
@@ -599,6 +643,9 @@
             int k = 182;
             int l = 91;
             this.blitOffset = -90;
+            //VIVECRAFT
+			GlStateManager.enableAlphaTest();
+			///
             this.blit(i - 91, this.scaledHeight - 22, 0, 0, 182, 22);
             this.blit(i - 91 - 1 + playerentity.inventory.currentItem * 20, this.scaledHeight - 22 - 1, 0, 22, 24, 22);
 
@@ -617,8 +664,9 @@
             this.blitOffset = j;
             GlStateManager.enableRescaleNormal();
             GlStateManager.enableBlend();
-            GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-            RenderHelper.enableGUIStandardItemLighting();
+			// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+			GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+			RenderHelper.enableGUIStandardItemLighting();
             CustomItems.setRenderOffHand(false);
 
             for (int i1 = 0; i1 < 9; ++i1)
@@ -773,8 +821,9 @@
             {
                 GlStateManager.pushMatrix();
                 GlStateManager.enableBlend();
-                GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-                fill(i - 2, j - 2, i + this.getFontRenderer().getStringWidth(s) + 2, j + 9 + 2, this.mc.gameSettings.func_216839_a(0));
+				// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+				GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+				fill(i - 2, j - 2, i + this.getFontRenderer().getStringWidth(s) + 2, j + 9 + 2, this.mc.gameSettings.func_216839_a(0));
                 FontRenderer fontrenderer = null;
 
                 if (Reflector.IForgeItem_getFontRenderer.exists())
@@ -1210,7 +1259,8 @@
     {
         GlStateManager.disableDepthTest();
         GlStateManager.depthMask(false);
-        GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+		// VIVECRAFT: DestFactor of ONE is really what we want here, because math
+		GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
         GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.disableAlphaTest();
         this.mc.getTextureManager().bindTexture(PUMPKIN_BLUR_TEX_PATH);
@@ -1239,6 +1289,9 @@
 
     private void renderVignette(Entity p_212303_1_)
     {
+		//VIVECRAFT NOPE!
+		if (true)return;
+		//
         if (!Config.isVignetteEnabled())
         {
             GlStateManager.enableDepthTest();
@@ -1291,6 +1344,10 @@
 
     private void renderPortal(float timeInPortal)
     {
+		//VIVECRAFT NOPE!
+		if(true) return;
+		//
+
         if (timeInPortal < 1.0F)
         {
             timeInPortal = timeInPortal * timeInPortal;
@@ -1526,4 +1583,53 @@
     {
         this.overlayDebug.func_212921_a();
     }
+    
+	//VIVECRAFT ADDITIONS ***********************************
+
+	public void drawMouseMenuQuad(int mouseX, int mouseY)
+	{	
+		GlStateManager.enableBlend();
+		GlStateManager.enableAlphaTest();
+		GlStateManager.disableDepthTest();
+		GlStateManager.disableLighting();
+		GlStateManager.color4f(1, 1, 1, 1);
+
+		this.mc.getTextureManager().bindTexture(GUI_ICONS_LOCATION);
+		float menuMousePointerSize = 16f * this.mc.vrSettings.menuCrosshairScale;
+		
+		//Why didnt we think of this sooner?
+		/*GlStateManager.colorMask(false, false, false, true);
+		GlStateManager.blendFunc(SourceFactor.CONSTANT_ALPHA, DestFactor.ZERO);
+		drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+		
+		GlStateManager.blendFunc(SourceFactor.ONE_MINUS_DST_COLOR, DestFactor.ONE_MINUS_SRC_COLOR);
+		GlStateManager.colorMask(true, true, true, false);
+		drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);*/
+
+		// Turns out all we needed was some blendFuncSeparate magic :)
+		// Also color DestFactor of ZERO produces better results with non-white crosshairs
+		GlStateManager.blendFuncSeparate(SourceFactor.ONE_MINUS_DST_COLOR, DestFactor.ZERO, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+		drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+
+		GlStateManager.disableBlend();
+		GlStateManager.blendFuncSeparate(SourceFactor.SRC_ALPHA, DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+		GlStateManager.enableDepthTest();
+		GlStateManager.enableLighting();
+		//GlStateManager.colorMask(true, true, true, false);
+	}
+	/**
+	 * Draws a centred textured rectangle at the stored z-value. Args: x, y, width, height, u, v, texwidth, texheight
+	 */
+	public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+	{   	
+		float f = 0.00390625F;
+		float f1 = 0.00390625F;
+		Tessellator tessellator = Tessellator.getInstance();
+		tessellator.getBuffer().begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX);
+		tessellator.getBuffer().pos((double)(centreX - (width / 2f)), (double)(centreY + (height / 2f)), (double)this.blitOffset).tex((double)((float)(u + 0) * f), (double)((float)(v + texHeight) * f1)).endVertex();
+		tessellator.getBuffer().pos((double)(centreX + (width / 2f)), (double)(centreY + (height / 2f)), (double)this.blitOffset).tex( (double)((float)(u + texWidth) * f), (double)((float)(v + texHeight) * f1)).endVertex();
+		tessellator.getBuffer().pos((double)(centreX + (width / 2f)), (double)(centreY - (height / 2f)), (double)this.blitOffset).tex( (double)((float)(u + texWidth) * f), (double)((float)(v + 0) * f1)).endVertex();
+		tessellator.getBuffer().pos((double)(centreX - (width / 2f)), (double)(centreY - (height / 2f)), (double)this.blitOffset).tex( (double)((float)(u + 0) * f), (double)((float)(v + 0) * f1)).endVertex();
+		tessellator.draw();
+	}
 }
