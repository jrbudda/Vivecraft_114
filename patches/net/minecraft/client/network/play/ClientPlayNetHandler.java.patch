--- a/net/minecraft/client/network/play/ClientPlayNetHandler.java
+++ b/net/minecraft/client/network/play/ClientPlayNetHandler.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.network.play;
 
+import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.authlib.GameProfile;
@@ -283,6 +284,7 @@
 import net.minecraft.util.math.MutableBoundingBox;
 import net.minecraft.util.math.SectionPos;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.registry.Registry;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
 import net.minecraft.world.Explosion;
@@ -296,6 +298,10 @@
 import net.minecraft.world.storage.MapData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.render.PlayerModelController;
 
 public class ClientPlayNetHandler implements IClientPlayNetHandler
 {
@@ -383,6 +389,14 @@
         this.client.gameSettings.sendSettingsToServer();
         this.netManager.sendPacket(new CCustomPayloadPacket(CCustomPayloadPacket.BRAND, (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
         this.client.getMinecraftGame().func_216814_a();
+    	// VIVE START - ask server if it's running this mod
+    	byte[] version = Minecraft.getInstance().minecriftVerString.getBytes(Charsets.UTF_8);
+    	String s = NetworkHelper.channel.toString();
+    	PacketBuffer pb = new PacketBuffer(Unpooled.buffer());
+    	pb.writeBytes(s.getBytes());
+    	this.netManager.sendPacket(new CCustomPayloadPacket(new ResourceLocation("minecraft:register"), pb));
+    	this.netManager.sendPacket(NetworkHelper.getVivecraftClientPacket(PacketDiscriminators.VERSION, version));
+    	// VIVE END - ask server if it's running this mod
     }
 
     /**
@@ -1369,7 +1383,7 @@
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         Container container = null;
-        PlayerEntity playerentity = this.client.player;
+        ClientPlayerEntity playerentity = this.client.player;
 
         if (packetIn.getWindowId() == 0)
         {
@@ -1384,6 +1398,7 @@
         {
             this.sendPacket(new CConfirmTransactionPacket(packetIn.getWindowId(), packetIn.getActionNumber(), true));
         }
+        
     }
 
     /**
@@ -2365,6 +2380,55 @@
 
                 this.client.debugRenderer.field_217741_m.func_217692_a(pointofinterestdebugrenderer$braininfo);
             }
+    		else if (resourcelocation.getNamespace().equalsIgnoreCase("vivecraft"))
+    		{ 			
+    			// VIVE START - server told us that it has this mod too, allow extended reach, etc.
+    			if (resourcelocation.getPath().equalsIgnoreCase("data"))
+    			{ 
+
+    				byte db = packetbuffer.readByte();
+    				PacketDiscriminators dis = PacketDiscriminators.values()[db];
+
+    				switch (dis){
+    				case VERSION:
+    					String v = packetbuffer.readString(1024);
+    					this.client.printChatMessage("Vivecraft server mod detected: " +  v);
+    					break;
+    				case REQUESTDATA:
+    					NetworkHelper.serverWantsData = true;
+    					break;
+    				case CLIMBING:
+    					break;
+    				case TELEPORT:
+    					NetworkHelper.serverSupportsDirectTeleport = true;
+    					break;
+    				case UBERPACKET:
+    					Long hi = packetbuffer.readLong();
+    					Long low = packetbuffer.readLong();
+    					byte[] hmd = new byte[29];
+    					byte[] c0 = new byte[29];
+    					byte[] c1 = new byte[29];
+    					packetbuffer.readBytes(29).getBytes(0, hmd);
+    					packetbuffer.readBytes(29).getBytes(0, c0);
+    					packetbuffer.readBytes(29).getBytes(0, c1);
+    					UUID u = new UUID(hi, low);
+
+    					float scale = 1f;
+    					float height = ServerVivePlayer.defaultHeight;
+    					if (packetbuffer.isReadable())
+    						scale = packetbuffer.readFloat();
+    					if (packetbuffer.isReadable())
+    						height = packetbuffer.readFloat();		
+
+    					PlayerModelController.getInstance().Update(u, hmd, c0, c1, scale, height / ServerVivePlayer.defaultHeight);    
+    						
+    					break;
+    				default:
+    					break;
+    				}
+    			}
+    		}
+    		// VIVE END
             else
             {
                 LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
@@ -2750,4 +2814,14 @@
     {
         return this.field_217289_q;
     }
+    //VIVECRAFT Additions
+    boolean tryParseInt(String value) {  
+    	try {  
+    		Integer.parseInt(value);  
+    		return true;  
+    	} catch (NumberFormatException e) {  
+    		return false;  
+    	}  
+    }
+    //
 }
